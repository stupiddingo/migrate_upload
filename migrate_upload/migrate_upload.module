<?php
/**
 * Implementation of hook_migrate_api()
 */
function migrate_upload_migrate_api() {
  $api = array(
    'api' => 2,
    'migrations' => array(
      'nest' => array(
        'class_name' => 'nestMigration',
      ),
    ),
  );
  return $api;
}

/**
 * Removes empty values prior to migrating.
 * @see http://drupal.org/node/1665332
 * @see http://drupal.org/node/1792894
 */
function _migrate_upload_remove_empties($destination, $entity) {
  if ($destination instanceof MigrateDestinationEntity) {
    $entity_type = $destination->getEntityType();
    $form = $form_state = array();
    _field_invoke_default('submit', $entity_type, $entity, $form, $form_state);
  }
}

/**
 * Transforms Lat/Lng from web service
 * Northing: 4641519, easting: 566648, CoordSys: UTM 11N NAD 1983 (WKID:26912)
 * Request: https://fishandgame.idaho.gov/ifwis/core/tools/reproject/118857.json?cachebuster=39364327&x=566648&y=4641519&inSR=26912&outSR=4326
 * Return: {"response":"success","msg":"","id":"118857","inx":"566648","iny":"4641519","inSR":"26912","outx":"-110.196217209855","outy":"41.9228161206506","outSR":"4326"}
 * Inputs lon, lat, 
 */
function _migrate_upload_lu_location_wgs($value) {
  // This web service transforms, cleans and converts (44 30 59N, 116 02 27W -> 44.516389, -116.040833 & 44, 116 -> 44, -116).
  $url = 'https://fishandgame.idaho.gov/ifwis/core/tools/reproject/'.rand(0,1000000).'.json?x='.$value['lon_x'].'&y='.$value['lat_y'].'&inSR='.$value['wkid'].'&outSR=4326';
  $json = drupal_http_request($url);
  if ($json->code != 200) {
    drupal_set_message(t('HTTP error @errorcode occurred when trying to query @remote.', array('@errorcode' => $json->code, '@remote' => $url)), 'error');
  }
  else {
    $geocode_results = drupal_json_decode($json->data);
    if (isset($geocode_results['response'])) {
      if ($geocode_results['response'] == 'success') {
        $value = array(
          'lat_y' => $geocode_results['outy'],
          'lon_x' => $geocode_results['outx'],
        );
      }
      else {
        drupal_set_message(t('Geocoding service reached, but geocoding returned failure for @remote.', array('@remote' => $url)), 'error');
      }
    }
    else {
      drupal_set_message(t('Geocoding service reached, no error code returned, no response returned for @remote.', array('@remote' => $url)), 'error');
    }
  }
  return $value;
}

/**
 * Lookup for WKID (Well-Known ID) from Coordinate System name.
 * See http://50.16.242.164/ArcGIS/SDK/REST/pcs.html for full list to add to this list.
 */
function _migrate_upload_lu_wkid($value) {
  $value = strtolower($value);
  $haystack = array (
    4326 => 'decimal degrees gcs wgs 1984 (most common)',
    4759 => 'decimal degrees gcs nad 1983',
    102605 => 'idaho tm nad 1983',
    26911 => 'utm zone 11n nad 1983',
    26912 => 'utm zone 12n nad 1983',
    26711 => 'utm zone 11n nad 1927',
    26712 => 'utm zone 12n nad 1927',
    102269 => 'harn stateplane idaho central fips 1102 nad 1983',
    102268 => 'harn stateplane idaho east fips 1101 nad 1983',
    102270 => 'harn stateplane idaho west fips 1103 nad 1983',
    102669 => 'stateplane idaho central fips 1102 nad 1983',
    102668 => 'stateplane idaho east fips 1101 nad 1983',
    102670 => 'stateplane idaho west fips 1103 nad 1983',
    3857 => 'web mercator wgs 1984 auxiliary sphere',
  );
  $wkid = array_search($value, $haystack);
  if (!$wkid) { $wkid = 4326; } // If null, assume WGS84 DD.
  return $wkid;
}

/**
 * Lookup common name for species
 * Returns species nid or false if no exact match for an alias.
 * TODO Could optimize common and scientific lookup to prioritize state name.
 */
function _migrate_upload_lu_species_by_name($value, $type = 'any') {
  if ($type == 'common') {
    $nid = db_query('SELECT nid FROM {node} taxa
    INNER JOIN {field_data_field_common_name} common ON ( taxa.vid = common.revision_id )
    WHERE taxa.status = 1 AND taxa.type = \'taxa\'
    AND common.field_common_name_value = :name', array(':name' => $value))->fetchField();
  }
  if ($type == 'scientific') {
    $nid = db_query('SELECT nid FROM {node} taxa
    INNER JOIN {field_data_field_scientific_name} scientific ON ( taxa.vid = scientific.revision_id )
    WHERE taxa.status = 1 AND taxa.type = \'taxa\'
    AND scientific.field_scientific_name_value = :name', array(':name' => $value))->fetchField();
  }
  if ($type == 'any') {
    // State common and scientific used for node title, search there first.
    $nid = db_query('SELECT nid FROM {node} WHERE taxa.status = 1 AND taxa.type = \'taxa\'
    AND title = :name', array(':name' => $value))->fetchField();

    if ($nid == false) {
      // If no matches search common and scientific aliases.
      $nid = db_query('SELECT nid FROM {node} taxa
      LEFT OUTER JOIN {field_data_field_common_name} common ON ( taxa.vid = common.revision_id )
      LEFT OUTER JOIN {field_data_field_scientific_name} scientific ON ( taxa.vid = scientific.revision_id )
      WHERE taxa.status = 1 AND taxa.type = \'taxa\'
      AND (common.field_common_name_value = :name OR scientific.field_scientific_name_value = :name)', array(':name' => $value))->fetchField();
    }
  }
  return $nid;
}

/**
 * Lookup SiteID by field_xid (NestID) attached to Survey Site Nodes.
 * Returns survey site nid or false if no exact match for an alias.
 */
function _migrate_upload_lu_survey_site_by_xid($value) {
  $nid = db_query('SELECT nid FROM {node} site
    INNER JOIN {field_data_field_xid} xid ON ( site.vid = xid.revision_id )
    WHERE site.status = 1 AND site.type = \'survey_site\'
    AND xid.field_xid_value = :xid', array(':xid' => $value))->fetchField();
  return $nid;
}

/** ======== FOLLOWING IS UNTESTED PSEUDO-CODE ========= **/

/**
 * Lookup user person from uid, person details array.
 * TODO The way we use sticky to store primary person could lead to trouble.
 */
function _migrate_upload_lu_person($uid, $person) {
  // See if thre is a primary person with this email. Should be only one match.
  $primary_person_nid = db_query('SELECT nid  FROM {node} person
    INNER JOIN {field_data_field_email} email ON ( person.vid = email.revision_id )
    WHERE person.status = 1 AND person.sticky = 1 AND person.type = \'person\'
    AND email.field_email_email == :email', array(':email' => $person['email']))->fetchField();

  // We are not checking if this is user's person or not, this could cause issues.
  if ($primary_person_nid) {
    return $primary_person_nid;
  }

  /*
   * TODO If we have an email create an account for this user or a stub in Drupal.
   *   STEPS
   *   ---------
   *   1. Create new user account in IDFG Accounts.
   *   2. Create new account in species.
   *   3. Create new primary user person and return.
   *      $new_person_nid = _migrate_upload_person_add($uid, $person, true);
   *   TODO when this step in place remove email from scoring below.
   */

  // Retrieve list of user's persons.
  $user_persons = db_query('SELECT nid, field_email_email, field_full_name_given, field_full_name_family, field_organization, field_position  FROM {node} person
    INNER JOIN {field_data_field_email} email ON ( person.vid = email.revision_id )
    INNER JOIN {field_data_field_full_name} full_name ON ( person.vid = full_name.revision_id )
    LEFT OUTER JOIN {field_data_field_organization} organization ON ( person.vid = organization.revision_id)
    LEFT OUTER JOIN {field_data_field_position} position ON ( person.vid = position.revision_id)
    LEFT OUTER JOIN {field_data_field_phone} phone ON ( person.vid = phone.revision_id)
    WHERE person.status = 1 AND person.sticky = 1 AND person.type = \'person\'
    AND person.uid = :uid AND email.field_data_field_email == :email', array(':uid' => $uid, ':email' => $person['email']));

  // Calculate a matching score using parts of the provided person's identity.
  // If high enough match return.
  $score = array();
  foreach ($user_persons as $user_person) {
    $score[$person->nid] = 0;
    // If email matches score 10.
    if ($user_person->field_email_email == $person['email']) {
      $score[$person->nid] += 10;
    }
    // If last name matches score 5.
    if ($user_person->field_full_name_family == $person['family']) {
      $score[$person->nid] += 5;
    }
    // If first name matches score 4.
    if ($user_person->field_full_name_given == $person['given']) {
      $score[$person->nid] += 4;
    }
    // If position matches score 3.
    if ($user_person->field_position == $person['position']) {
      $score[$person->nid] += 3;
    }
    // If position matches score 2.
    if ($user_person->field_organization == $person['organization']) {
      $score[$person->nid] += 2;
    }
    // If phone matches score 1.
    if ($user_person->field_phone == $person['phone']) {
      $score[$person->nid] += 1;
    }
  }
  // If total score more than 10 accept as the correct person.
  $max_score = max($score);
  if ($max_score > 10) {
    return array_search($max_score, $score);
  }
  // Create new User Person.
  $new_person_nid = _migrate_upload_person_add($uid, $person, false);
  if ($new_person_nid) {
    return $new_person_nid;
  }
  else {
    return false;
  }
}

/**
 * Create a new person.
 */
function _migrate_upload_person_add( $uid, $person, $sticky = false ) {
  module_load_include('inc', 'node', 'node.pages');

  $node_person = (object) array(
    'type' => 'person',
    'language' => LANGUAGE_NONE
  );
  node_object_prepare($node_person);

  $form_state = array();
  $form_state['values']['op'] = t('Save');
  $form_state['values']['name'] = db_result(db_query("SELECT name FROM {users} WHERE uid = '%s'", $uid));
  $form_state['values']['sticky'] = $sticky;

  $form_state['values']['field_full_name']['und'][0]['given'] = $person['given'];
  $form_state['values']['field_full_name']['und'][0]['family'] = $person['family'];
  $form_state['values']['field_organization']['und'][0]['value'] = $person['organization'];
  $form_state['values']['field_position']['und'][0]['value'] = $person['position'];
  $form_state['values']['field_email']['und'][0]['email'] = $person['email'];
  $form_state['values']['field_phone']['und'][0]['value'] = $person['phone'];
  // TODO Add About (Background) and Postal Address fields?

  drupal_form_submit('person_node_form', $form_state, $node_person);

  // Return nid of new person or zero if creation failed.
  if (form_get_errors()) {
    // Log errors return 0.
    watchdog('migrate_upload', 'Person creation failed for uid %uid on %given %family.',
      array('%uid' => $uid, '%given' => $person["given"], '%family' => $person["family"]), WATCHDOG_ERROR, $link = NULL);
    return 0;
  } else {
    // clear status messages to remove new person notification.
    drupal_get_messages('status');
    return $node_person->nid;
  }
}
